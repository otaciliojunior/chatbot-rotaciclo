// Importa o SDK Admin do Firebase
const admin = require('firebase-admin');

// Carrega suas credenciais de administrador do arquivo JSON
// COLOQUE O ARQUIVO serviceAccountKey.json NA MESMA PASTA DESTE SCRIPT
const serviceAccount = require('./serviceAccountKey.json');

// Inicializa o app Firebase com as credenciais
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

// Cria uma referência para o Firestore
const db = admin.firestore();

/**
 * Função principal para migrar os clientes da coleção 'atendimentos'
 * para a coleção 'clientes'.
 */
async function migrarClientes() {
  console.log('Iniciando a migração de clientes...');

  try {
    // 1. Referências para as coleções
    const atendimentosRef = db.collection('atendimentos');
    const clientesRef = db.collection('clientes');

    // 2. Busca todos os documentos da coleção de atendimentos
    const snapshot = await atendimentosRef.get();

    if (snapshot.empty) {
      console.log('Nenhum atendimento encontrado. Nenhuma ação necessária.');
      return;
    }

    console.log(`Encontrados ${snapshot.size} registros de atendimento. Processando clientes únicos...`);

    // 3. Mapeia todos os clientes únicos para evitar processamento duplicado
    const clientesMap = new Map();
    snapshot.forEach(doc => {
      const atendimento = doc.data();
      // Garante que temos os dados necessários para criar um cliente
      // CORREÇÃO APLICADA AQUI:
      if (atendimento.cliente_id && atendimento.cliente_nome) {
        if (!clientesMap.has(atendimento.cliente_id)) {
          clientesMap.set(atendimento.cliente_id, {
            // CORREÇÃO APLICADA AQUI:
            nome: atendimento.cliente_nome,
            // Valores padrão para o novo documento de cliente
            notas: "",
            tags: [],
            criadoEm: admin.firestore.FieldValue.serverTimestamp() // Adiciona um carimbo de data/hora de criação
          });
        }
      }
    });

    // 4. Prepara as operações de escrita no banco de dados
    const batchArray = [];
    batchArray.push(db.batch());
    let operationCounter = 0;
    let batchIndex = 0;

    console.log(`Identificados ${clientesMap.size} clientes únicos. Criando documentos...`);
    
    // Itera sobre o mapa de clientes únicos
    for (const [clienteId, clienteData] of clientesMap.entries()) {
      const clienteDocRef = clientesRef.doc(clienteId);
      // Usamos 'set' com '{ merge: true }' para criar o documento SOMENTE se ele não existir.
      // Se já existir, ele não fará nada, o que torna o script seguro para ser executado várias vezes.
      batchArray[batchIndex].set(clienteDocRef, clienteData, { merge: true });
      operationCounter++;

      // O Firestore limita as operações em lote a 500. Criamos um novo lote se o limite for atingido.
      if (operationCounter === 499) {
        batchArray.push(db.batch());
        batchIndex++;
        operationCounter = 0;
      }
    }
    
    // 5. Executa todas as operações em lote
    await Promise.all(batchArray.map(batch => batch.commit()));

    console.log('----------------------------------------------------');
    console.log(`✅ Sucesso! Operação concluída.`);
    console.log(`${clientesMap.size} clientes foram verificados e/ou adicionados à coleção 'clientes'.`);
    console.log('----------------------------------------------------');

  } catch (error) {
    console.error('❌ Ocorreu um erro durante a migração:', error);
  }
}

// Executa a função
migrarClientes();